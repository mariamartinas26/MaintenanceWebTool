--DROP TABLE IF EXISTS "AppointmentHistory", "WorkOrders", "OrderItems", "Orders", "Parts", "Suppliers",
--"AppointmentMedia", "Appointments", "Vehicles", "Calendar", "Users", "PriceHistory" CASCADE;


CREATE TABLE IF NOT EXISTS "Users" (
                                       "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       "email" VARCHAR UNIQUE NOT NULL,
                                       "password_hash" VARCHAR NOT NULL,
                                       "first_name" VARCHAR,
                                       "last_name" VARCHAR,
                                       "phone" VARCHAR,
                                       "role" VARCHAR,
                                       "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "Users"."role" IS 'ENUM: ''client'', ''admin''';

-- Vehicles Table
CREATE TABLE IF NOT EXISTS"Vehicles" (
                                         "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                         "user_id" INTEGER,
                                         "vehicle_type" VARCHAR,
                                         "brand" VARCHAR,
                                         "model" VARCHAR,
                                         "year" INTEGER,
                                         "is_electric" BOOLEAN DEFAULT false,
                                         "notes" TEXT,
                                         "created_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "Vehicles"."vehicle_type" IS 'ENUM: ''motocicleta'', ''bicicleta'', ''trotineta''';

-- Appointments Table
CREATE TABLE IF NOT EXISTS "Appointments" (
                                              "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              "user_id" INTEGER,
                                              "vehicle_id" INTEGER,
                                              "appointment_date" TIMESTAMP NOT NULL,
                                              "status" VARCHAR,
                                              "problem_description" TEXT,
                                              "admin_response" TEXT,
                                              "estimated_price" DECIMAL,
                                              "estimated_completion_time" TIMESTAMP,
                                              "warranty_info" TEXT,
                                              "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "Appointments"."status" IS 'ENUM: ''pending'', ''approved'', ''rejected'', ''completed'', ''cancelled''';

-- AppointmentMedia Table
CREATE TABLE IF NOT EXISTS "AppointmentMedia" (
                                                  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  "appointment_id" INTEGER,
                                                  "file_path" VARCHAR NOT NULL,
                                                  "file_type" VARCHAR,
                                                  "original_filename" VARCHAR,
                                                  "mime_type" VARCHAR,
                                                  "uploaded_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "AppointmentMedia"."file_type" IS 'ENUM: ''image'', ''video''';

-- Parts Table
CREATE TABLE IF NOT EXISTS "Parts" (
                                       "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       "name" VARCHAR NOT NULL,
                                       "description" TEXT,
                                       "part_number" VARCHAR UNIQUE,
                                       "category" VARCHAR,
                                       "price" DECIMAL NOT NULL,
                                       "stock_quantity" INTEGER DEFAULT 0,
                                       "minimum_stock_level" INTEGER DEFAULT 5,
                                       "supplier_id" INTEGER,
                                       "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now()
    );

-- Suppliers Table
CREATE TABLE IF NOT EXISTS "Suppliers" (
                                           "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           "company_name" VARCHAR NOT NULL,
                                           "contact_person" VARCHAR,
                                           "email" VARCHAR,
                                           "phone" VARCHAR,
                                           "address" TEXT,
                                           "delivery_time_days" INTEGER DEFAULT 7,
                                           "created_at" TIMESTAMP DEFAULT now()
    );

-- Orders Table
CREATE TABLE IF NOT EXISTS "Orders" (
                                        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                        "supplier_id" INTEGER,
                                        "order_date" TIMESTAMP NOT NULL,
                                        "expected_delivery_date" TIMESTAMP,
                                        "actual_delivery_date" TIMESTAMP,
                                        "status" VARCHAR,
                                        "total_amount" DECIMAL,
                                        "notes" TEXT,
                                        "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "Orders"."status" IS 'ENUM: ''ordered'', ''in_transit'', ''delivered'', ''cancelled''';

-- OrderItems Table
CREATE TABLE IF NOT EXISTS "OrderItems" (
                                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            "order_id" INTEGER,
                                            "part_id" INTEGER,
                                            "quantity" INTEGER NOT NULL,
                                            "unit_price" DECIMAL NOT NULL,
                                            "subtotal" DECIMAL NOT NULL
);

-- WorkOrders Table
CREATE TABLE IF NOT EXISTS "WorkOrders" (
                                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            "appointment_id" INTEGER,
                                            "mechanic_id" INTEGER,
                                            "start_time" TIMESTAMP,
                                            "end_time" TIMESTAMP,
                                            "work_description" TEXT,
                                            "parts_used" JSON,
                                            "actual_price" DECIMAL,
                                            "created_at" TIMESTAMP DEFAULT now()
    );

-- Calendar Table
CREATE TABLE IF NOT EXISTS "Calendar" (
                                          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                          "date" DATE NOT NULL,
                                          "start_time" TIME NOT NULL,
                                          "end_time" TIME NOT NULL,
                                          "is_available" BOOLEAN DEFAULT true,
                                          "max_appointments" INTEGER DEFAULT 5,
                                          "current_appointments" INTEGER DEFAULT 0,
                                          "notes" TEXT
);

-- AppointmentHistory Table
CREATE TABLE IF NOT EXISTS "AppointmentHistory" (
                                                    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                    "appointment_id" INTEGER,
                                                    "user_id" INTEGER,
                                                    "action" VARCHAR,
                                                    "old_status" VARCHAR,
                                                    "new_status" VARCHAR,
                                                    "comment" TEXT,
                                                    "created_at" TIMESTAMP DEFAULT now()
    );

-- PriceHistory Table
CREATE TABLE IF NOT EXISTS "PriceHistory" (
                                              "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              "service_type" VARCHAR,
                                              "work_description" TEXT,
                                              "price" DECIMAL,
                                              "duration_minutes" INTEGER,
                                              "valid_from" TIMESTAMP NOT NULL,
                                              "valid_to" TIMESTAMP
);
ALTER TABLE "Appointments"
    ADD COLUMN "rejection_reason" TEXT,
ADD COLUMN "retry_days" INTEGER;


UPDATE "Appointments"
SET admin_response = CASE
                         WHEN admin_response LIKE '%Appointment was approved%' THEN
                             TRIM(SUBSTRING(admin_response FROM '^(.*?)(?=\nAppointment was approved|Appointment was approved)'))
                         ELSE admin_response
    END
WHERE status = 'approved'
  AND admin_response LIKE '%Appointment was approved%';


UPDATE "Appointments"
SET admin_response = NULL
WHERE admin_response = '' OR admin_response IS NULL;


UPDATE "Appointments"
SET
    rejection_reason = CASE
                           WHEN admin_response LIKE '%Reason for rejection:%' THEN
                               TRIM(SUBSTRING(admin_response FROM 'Reason for rejection: ([^\.]+)'))
                           ELSE admin_response
        END,
    admin_response = NULL
WHERE status = 'rejected'
  AND admin_response IS NOT NULL;



CREATE TABLE IF NOT EXISTS "AppointmentParts" (
                                                  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  "appointment_id" INTEGER NOT NULL,
                                                  "part_id" INTEGER NOT NULL,
                                                  "quantity" INTEGER NOT NULL CHECK (quantity > 0),
    "unit_price" DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
    "subtotal" DECIMAL(10,2) NOT NULL CHECK (subtotal >= 0),
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Foreign keys
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id") ON DELETE CASCADE,
    FOREIGN KEY ("part_id") REFERENCES "Parts" ("id") ON DELETE RESTRICT,

    -- Unique constraint pentru a evita duplicarea aceleiași piese pentru aceeași programare
    UNIQUE ("appointment_id", "part_id")
    );

-- Index pentru performanță
CREATE INDEX IF NOT EXISTS "idx_appointment_parts_appointment_id" ON "AppointmentParts" ("appointment_id");
CREATE INDEX IF NOT EXISTS "idx_appointment_parts_part_id" ON "AppointmentParts" ("part_id");

-- Trigger pentru actualizarea automatică a câmpului updated_at
CREATE OR REPLACE FUNCTION update_appointment_parts_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_appointment_parts_updated_at
    BEFORE UPDATE ON "AppointmentParts"
    FOR EACH ROW
    EXECUTE FUNCTION update_appointment_parts_updated_at();


CREATE TABLE IF NOT EXISTS "StockHistory" (
                                              "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              "part_id" INTEGER NOT NULL,
                                              "appointment_id" INTEGER,
                                              "change_type" VARCHAR NOT NULL, -- 'reduce', 'restore', 'adjust'
                                              "quantity_change" INTEGER NOT NULL, -- pozitiv pentru adăugare, negativ pentru scădere
                                              "previous_stock" INTEGER NOT NULL,
                                              "new_stock" INTEGER NOT NULL,
                                              "reason" VARCHAR,
                                              "admin_id" INTEGER,
                                              "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Foreign keys
                                              FOREIGN KEY ("part_id") REFERENCES "Parts" ("id") ON DELETE CASCADE,
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id") ON DELETE SET NULL,
    FOREIGN KEY ("admin_id") REFERENCES "Users" ("id") ON DELETE SET NULL
    );

-- Index pentru performanță
CREATE INDEX IF NOT EXISTS "idx_stock_history_part_id" ON "StockHistory" ("part_id");
CREATE INDEX IF NOT EXISTS "idx_stock_history_appointment_id" ON "StockHistory" ("appointment_id");
CREATE INDEX IF NOT EXISTS "idx_stock_history_created_at" ON "StockHistory" ("created_at");


CREATE OR REPLACE FUNCTION log_stock_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Doar dacă stock_quantity s-a schimbat
    IF OLD.stock_quantity != NEW.stock_quantity THEN
        INSERT INTO "StockHistory" (
            part_id,
            change_type,
            quantity_change,
            previous_stock,
            new_stock,
            reason,
            created_at
        ) VALUES (
            NEW.id,
            CASE
                WHEN NEW.stock_quantity > OLD.stock_quantity THEN 'restore'
                WHEN NEW.stock_quantity < OLD.stock_quantity THEN 'reduce'
                ELSE 'adjust'
            END,
            NEW.stock_quantity - OLD.stock_quantity,
            OLD.stock_quantity,
            NEW.stock_quantity,
            'Stock updated via system',
            CURRENT_TIMESTAMP
        );
END IF;

RETURN NEW;
END;
$$ language 'plpgsql';

-- Aplicarea trigger-ului
DROP TRIGGER IF EXISTS stock_change_trigger ON "Parts";
CREATE TRIGGER stock_change_trigger
    AFTER UPDATE ON "Parts"
    FOR EACH ROW
    EXECUTE FUNCTION log_stock_change();

-- View pentru rapoarte de stoc
CREATE OR REPLACE VIEW "StockMovementReport" AS
SELECT
    sh.id,
    sh.created_at,
    p.name as part_name,
    p.part_number,
    p.category,
    sh.change_type,
    sh.quantity_change,
    sh.previous_stock,
    sh.new_stock,
    sh.reason,
    a.id as appointment_id,
    CONCAT(u.first_name, ' ', u.last_name) as client_name,
    admin_u.first_name as admin_name
FROM "StockHistory" sh
         JOIN "Parts" p ON sh.part_id = p.id
         LEFT JOIN "Appointments" a ON sh.appointment_id = a.id
         LEFT JOIN "Users" u ON a.user_id = u.id
         LEFT JOIN "Users" admin_u ON sh.admin_id = admin_u.id
ORDER BY sh.created_at DESC;

-- Functie pentru a obține istoric stoc pentru o piesă specifică
CREATE OR REPLACE FUNCTION get_part_stock_history(part_id_param INTEGER, limit_param INTEGER DEFAULT 50)
RETURNS TABLE (
    id INTEGER,
    created_at TIMESTAMP,
    change_type VARCHAR,
    quantity_change INTEGER,
    previous_stock INTEGER,
    new_stock INTEGER,
    reason VARCHAR,
    appointment_id INTEGER,
    client_name TEXT
) AS $$
BEGIN
RETURN QUERY
SELECT
    sh.id,
    sh.created_at,
    sh.change_type,
    sh.quantity_change,
    sh.previous_stock,
    sh.new_stock,
    sh.reason,
    sh.appointment_id,
    CASE
        WHEN a.id IS NOT NULL THEN CONCAT(u.first_name, ' ', u.last_name)
        ELSE NULL
        END as client_name
FROM "StockHistory" sh
         LEFT JOIN "Appointments" a ON sh.appointment_id = a.id
         LEFT JOIN "Users" u ON a.user_id = u.id
WHERE sh.part_id = part_id_param
ORDER BY sh.created_at DESC
    LIMIT limit_param;
END;
$$ LANGUAGE plpgsql;
-- Foreign Keys
ALTER TABLE "Vehicles" ADD FOREIGN KEY ("user_id") REFERENCES "Users" ("id");
ALTER TABLE "Appointments" ADD FOREIGN KEY ("user_id") REFERENCES "Users" ("id");
ALTER TABLE "Appointments" ADD FOREIGN KEY ("vehicle_id") REFERENCES "Vehicles" ("id");
ALTER TABLE "AppointmentMedia" ADD FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id");
ALTER TABLE "Parts" ADD FOREIGN KEY ("supplier_id") REFERENCES "Suppliers" ("id");
ALTER TABLE "Orders" ADD FOREIGN KEY ("supplier_id") REFERENCES "Suppliers" ("id");
ALTER TABLE "OrderItems" ADD FOREIGN KEY ("order_id") REFERENCES "Orders" ("id");
ALTER TABLE "OrderItems" ADD FOREIGN KEY ("part_id") REFERENCES "Parts" ("id");
ALTER TABLE "WorkOrders" ADD FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id");
ALTER TABLE "WorkOrders" ADD FOREIGN KEY ("mechanic_id") REFERENCES "Users" ("id");
ALTER TABLE "AppointmentHistory" ADD FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id");
ALTER TABLE "AppointmentHistory" ADD FOREIGN KEY ("user_id") REFERENCES "Users" ("id");
