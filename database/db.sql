--DROP TABLE IF EXISTS "AppointmentHistory", "WorkOrders", "OrderItems", "Orders", "Parts", "Suppliers",
--"AppointmentMedia", "Appointments", "Vehicles", "Calendar", "Users", "PriceHistory" CASCADE;

-- Users Table
CREATE TABLE IF NOT EXISTS "Users" (
                                       "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       "email" VARCHAR UNIQUE NOT NULL,
                                       "password_hash" VARCHAR NOT NULL,
                                       "first_name" VARCHAR,
                                       "last_name" VARCHAR,
                                       "phone" VARCHAR,
                                       "role" VARCHAR,
                                       "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now(),
    "status" VARCHAR DEFAULT 'active'
    );
COMMENT ON COLUMN "Users"."role" IS 'ENUM: ''client'', ''admin'', ''manager'', ''accountant''';

-- Vehicles Table
CREATE TABLE IF NOT EXISTS "Vehicles" (
                                          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                          "user_id" INTEGER,
                                          "vehicle_type" VARCHAR,
                                          "brand" VARCHAR,
                                          "model" VARCHAR,
                                          "year" INTEGER,
                                          "is_electric" BOOLEAN DEFAULT false,
                                          "notes" TEXT,
                                          "created_at" TIMESTAMP DEFAULT now()
    );
COMMENT ON COLUMN "Vehicles"."vehicle_type" IS 'ENUM: ''motocicleta'', ''bicicleta'', ''trotineta''';

-- Appointments Table
CREATE TABLE IF NOT EXISTS "Appointments" (
                                              "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              "user_id" INTEGER,
                                              "vehicle_id" INTEGER,
                                              "appointment_date" TIMESTAMP NOT NULL,
                                              "status" VARCHAR,
                                              "problem_description" TEXT,
                                              "admin_response" TEXT,
                                              "estimated_price" DECIMAL,
                                              "estimated_completion_time" TIMESTAMP,
                                              "warranty_info" TEXT,
                                              "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now(),
    "rejection_reason" TEXT
    );
COMMENT ON COLUMN "Appointments"."status" IS 'ENUM: ''pending'', ''approved'', ''rejected'', ''completed'', ''cancelled''';

-- Suppliers Table
CREATE TABLE IF NOT EXISTS "Suppliers" (
                                           "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           "company_name" VARCHAR NOT NULL,
                                           "contact_person" VARCHAR,
                                           "email" VARCHAR,
                                           "phone" VARCHAR,
                                           "address" TEXT,
                                           "delivery_time_days" INTEGER DEFAULT 7,
                                           "created_at" TIMESTAMP DEFAULT now()
    );

-- Parts Table
CREATE TABLE IF NOT EXISTS "Parts" (
                                       "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       "name" VARCHAR NOT NULL,
                                       "description" TEXT,
                                       "part_number" VARCHAR,
                                       "category" VARCHAR,
                                       "price" DECIMAL NOT NULL,
                                       "stock_quantity" INTEGER DEFAULT 0,
                                       "minimum_stock_level" INTEGER DEFAULT 5,
                                       "supplier_id" INTEGER,
                                       "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now()
    );

-- Orders Table
CREATE TABLE IF NOT EXISTS "Orders" (
                                        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                        "supplier_id" INTEGER,
                                        "order_date" TIMESTAMP NOT NULL,
                                        "expected_delivery_date" TIMESTAMP,
                                        "actual_delivery_date" TIMESTAMP,
                                        "status" VARCHAR,
                                        "total_amount" DECIMAL,
                                        "notes" TEXT,
                                        "created_at" TIMESTAMP DEFAULT now(),
    "updated_at" TIMESTAMP DEFAULT now(),
    "product_name" TEXT,
    "product_quantity" INTEGER,
    "product_unit_price" DECIMAL
    );
COMMENT ON COLUMN "Orders"."status" IS 'ENUM: ''ordered'', ''in_transit'', ''delivered'', ''cancelled''';

-- OrderItems Table
CREATE TABLE IF NOT EXISTS "OrderItems" (
                                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            "order_id" INTEGER,
                                            "part_id" INTEGER,
                                            "quantity" INTEGER NOT NULL,
                                            "unit_price" DECIMAL NOT NULL,
                                            "subtotal" DECIMAL NOT NULL
);

-- WorkOrders Table
CREATE TABLE IF NOT EXISTS "WorkOrders" (
                                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            "appointment_id" INTEGER,
                                            "mechanic_id" INTEGER,
                                            "start_time" TIMESTAMP,
                                            "end_time" TIMESTAMP,
                                            "work_description" TEXT,
                                            "parts_used" JSON,
                                            "actual_price" DECIMAL,
                                            "created_at" TIMESTAMP DEFAULT now()
    );

-- Calendar Table
CREATE TABLE IF NOT EXISTS "Calendar" (
                                          "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                          "date" DATE NOT NULL,
                                          "start_time" TIME NOT NULL,
                                          "end_time" TIME NOT NULL,
                                          "is_available" BOOLEAN DEFAULT true,
                                          "max_appointments" INTEGER DEFAULT 5,
                                          "current_appointments" INTEGER DEFAULT 0,
                                          "notes" TEXT
);

-- AccountRequests Table
CREATE TABLE IF NOT EXISTS "AccountRequests" (
                                                 "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                 "email" VARCHAR NOT NULL,
                                                 "password_hash" VARCHAR NOT NULL,
                                                 "first_name" VARCHAR NOT NULL,
                                                 "last_name" VARCHAR NOT NULL,
                                                 "phone" VARCHAR NOT NULL,
                                                 "role" VARCHAR NOT NULL DEFAULT 'client',
                                                 "message" TEXT,
                                                 "status" VARCHAR NOT NULL DEFAULT 'pending',
                                                 "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                                 "processed_at" TIMESTAMP,
                                                 "manager_message" TEXT,
                                                 "approved_user_id" INTEGER,
                                                 "assigned_role" VARCHAR,

                                                 CONSTRAINT check_role CHECK (role IN ('client', 'admin', 'accountant')),
    CONSTRAINT check_status CHECK (status IN ('pending', 'approved', 'rejected'))
    );

-- AppointmentHistory Table
CREATE TABLE IF NOT EXISTS "AppointmentHistory" (
                                                    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                    "appointment_id" INTEGER,
                                                    "user_id" INTEGER,
                                                    "action" VARCHAR,
                                                    "old_status" VARCHAR,
                                                    "new_status" VARCHAR,
                                                    "comment" TEXT,
                                                    "created_at" TIMESTAMP DEFAULT now()
    );

-- AppointmentParts Table
CREATE TABLE IF NOT EXISTS "AppointmentParts" (
                                                  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  "appointment_id" INTEGER NOT NULL,
                                                  "part_id" INTEGER NOT NULL,
                                                  "quantity" INTEGER NOT NULL CHECK (quantity > 0),
    "unit_price" DECIMAL NOT NULL CHECK (unit_price >= 0),
    "subtotal" DECIMAL NOT NULL CHECK (subtotal >= 0),
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    UNIQUE ("appointment_id", "part_id")
    );

CREATE INDEX IF NOT EXISTS "idx_appointment_parts_appointment_id" ON "AppointmentParts" ("appointment_id");
CREATE INDEX IF NOT EXISTS "idx_appointment_parts_part_id" ON "AppointmentParts" ("part_id");
CREATE INDEX IF NOT EXISTS "idx_stock_history_part_id" ON "StockHistory" ("part_id");
CREATE INDEX IF NOT EXISTS "idx_stock_history_appointment_id" ON "StockHistory" ("appointment_id");
CREATE INDEX IF NOT EXISTS "idx_stock_history_created_at" ON "StockHistory" ("created_at");

CREATE OR REPLACE FUNCTION update_appointment_parts_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_appointment_parts_updated_at ON "AppointmentParts";
CREATE TRIGGER update_appointment_parts_updated_at
    BEFORE UPDATE ON "AppointmentParts"
    FOR EACH ROW
    EXECUTE FUNCTION update_appointment_parts_updated_at();

CREATE OR REPLACE FUNCTION log_stock_change()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.stock_quantity != NEW.stock_quantity THEN
        INSERT INTO "StockHistory" (
            part_id,
            change_type,
            quantity_change,
            previous_stock,
            new_stock,
            reason,
            created_at
        ) VALUES (
            NEW.id,
            CASE
                WHEN NEW.stock_quantity > OLD.stock_quantity THEN 'restore'
                WHEN NEW.stock_quantity < OLD.stock_quantity THEN 'reduce'
                ELSE 'adjust'
            END,
            NEW.stock_quantity - OLD.stock_quantity,
            OLD.stock_quantity,
            NEW.stock_quantity,
            'Stock updated via system',
            CURRENT_TIMESTAMP
        );
END IF;

RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS stock_change_trigger ON "Parts";
CREATE TRIGGER stock_change_trigger
    AFTER UPDATE ON "Parts"
    FOR EACH ROW
    EXECUTE FUNCTION log_stock_change();

-- Foreign Keys
ALTER TABLE "Vehicles" ADD CONSTRAINT fk_vehicles_user_id
    FOREIGN KEY ("user_id") REFERENCES "Users" ("id")
        ON DELETE CASCADE;

ALTER TABLE "Appointments" ADD CONSTRAINT fk_appointments_user_id
    FOREIGN KEY ("user_id") REFERENCES "Users" ("id")
        ON DELETE CASCADE;

ALTER TABLE "Appointments" ADD CONSTRAINT fk_appointments_vehicle_id
    FOREIGN KEY ("vehicle_id") REFERENCES "Vehicles" ("id")
        ON DELETE CASCADE;

ALTER TABLE "AppointmentMedia" ADD CONSTRAINT fk_appointmentmedia_appointment_id
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id")
        ON DELETE CASCADE;

ALTER TABLE "Parts" ADD CONSTRAINT fk_parts_supplier_id
    FOREIGN KEY ("supplier_id") REFERENCES "Suppliers" ("id")
        ON DELETE SET NULL;

ALTER TABLE "Orders" ADD CONSTRAINT fk_orders_supplier_id
    FOREIGN KEY ("supplier_id") REFERENCES "Suppliers" ("id")
        ON DELETE SET NULL;

ALTER TABLE "OrderItems" ADD CONSTRAINT fk_orderitems_order_id
    FOREIGN KEY ("order_id") REFERENCES "Orders" ("id")
        ON DELETE CASCADE;

ALTER TABLE "OrderItems" ADD CONSTRAINT fk_orderitems_part_id
    FOREIGN KEY ("part_id") REFERENCES "Parts" ("id")
        ON DELETE RESTRICT;

ALTER TABLE "WorkOrders" ADD CONSTRAINT fk_workorders_appointment_id
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id")
        ON DELETE CASCADE;

ALTER TABLE "WorkOrders" ADD CONSTRAINT fk_workorders_mechanic_id
    FOREIGN KEY ("mechanic_id") REFERENCES "Users" ("id")
        ON DELETE SET NULL;

ALTER TABLE "AppointmentHistory" ADD CONSTRAINT fk_appointmenthistory_appointment_id
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id")
        ON DELETE CASCADE;

ALTER TABLE "AppointmentHistory" ADD CONSTRAINT fk_appointmenthistory_user_id
    FOREIGN KEY ("user_id") REFERENCES "Users" ("id")
        ON DELETE SET NULL;

ALTER TABLE "AppointmentParts" ADD CONSTRAINT fk_appointmentparts_appointment_id
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id")
        ON DELETE CASCADE;

ALTER TABLE "AppointmentParts" ADD CONSTRAINT fk_appointmentparts_part_id
    FOREIGN KEY ("part_id") REFERENCES "Parts" ("id")
        ON DELETE RESTRICT;

ALTER TABLE "StockHistory" ADD CONSTRAINT fk_stockhistory_part_id
    FOREIGN KEY ("part_id") REFERENCES "Parts" ("id")
        ON DELETE CASCADE;

ALTER TABLE "StockHistory" ADD CONSTRAINT fk_stockhistory_appointment_id
    FOREIGN KEY ("appointment_id") REFERENCES "Appointments" ("id")
        ON DELETE SET NULL;

ALTER TABLE "StockHistory" ADD CONSTRAINT fk_stockhistory_admin_id
    FOREIGN KEY ("admin_id") REFERENCES "Users" ("id")
        ON DELETE SET NULL;